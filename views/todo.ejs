<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EDC Attendance Tracker</title>
</head>
<style>
body {
    margin: 0;
    padding: 0;
    font-family: 'Roboto', Arial, sans-serif;
    background-color: #eef2f7;
    color: #333;
    line-height: 1.6;
}

h1 {
    text-align: center;
    font-family: 'Lucida Sans', sans-serif;
    font-weight: bold;
    color: #0b0b82;
    margin-top: 20px;
}

img {
    display: block;
    max-width: 100vw;
    
}

.creation {
    display: flex;
    justify-content: center;
    margin-top: 30px;
}

.creation > button {
    background-color: #3498db;
    border: none;
    border-radius: 30px;
    color: #fff;
    cursor: pointer;
    font-family: 'Roboto', sans-serif;
    font-size: 18px;
    padding: 12px 25px;
    margin: 0 10px;
    transition: background-color 0.3s ease;
}

.creation > button:hover {
    background-color: #2980b9;
}

.marking {
    border: 1px solid #3498db;
    border-radius: 10px;
    padding: 30px;
    margin: 20px auto;
    max-width: 400px;
    background-color: #fff;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

#attendance-form {
    text-align: center;
    padding: 20px;
}

#name-input {
    width: 100%;
    padding: 15px;
    margin-bottom: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
}

#mark-attendance-btn {
    width: 100%;
    padding: 15px;
    background-color: #2ecc71;
    color: white;
    border: none;
    border-radius: 30px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

#mark-attendance-btn:hover {
    background-color: #27ae60;
}

#location-display {
    margin-top: 30px;
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 10px;
    text-align: center;
    color: #555;
    font-size: 16px;
}

#location-display p {
    margin: 10px 0;
}

#location-display span {
    font-weight: bold;
}

h2 {
    color: #2ecc71;
    text-align: center;
    font-family: 'Roboto', sans-serif;
}

hr {
    border: 1px solid #3498db;
    margin: 40px auto;
    max-width: 80%;
}
a{
    text-decoration: none;
    color: #3498db;
    cursor: pointer;
    margin: auto auto ;
    width: 30vw;
    display: flex;
    justify-items: center;
    justify-content: center;
    align-items: center;
    border: 3px solid #0a314b;
    border-radius: 10px;
}
</style>
<body>
    


    <div>
        <img src="/images/logo.jpg" alt="EDC Logo" />
        <br>
        <h1>EDC Attendance Tracker</h1>
        <br>

        <% if (user && user.displayName) { %>
            <h2>Welcome, <%= user.displayName %></h2>
        <% } else { %>
            <h2>Hello, Guest</h2>
        <% } %>

       
    </div>
    
    
<hr>


    <div class="creation">
        <button id="create-meet-btn">Create EDC Meet</button>
        <button id="end-meet-btn" style="display: none;">End Meet</button>
    </div>
    <br>
    <br>
    
    <div class="marking">
        <form id="attendance-form">
            <!-- <input type="text" id="name-input" placeholder="Enter Name to Mark Attendance"> -->
            <button id="mark-attendance-btn">Mark Attendance</button>
        </form>
    </div>
  
    <a onclick="/logout"> log out</a>
    <hr>
    <div id="location-display" style="margin-top: 20px;">
        <p>Latitude: <span id="latitude"></span></p>
        <p>Longitude: <span id="longitude"></span></p>
        <p>Made with &#9829; by Harsh Ranjan</p>
    </div>

    <script>

let preventReload = false;

        // Function to update the displayed latitude and longitude
        function updateLocationDisplay(latitude, longitude) {
            document.getElementById('latitude').textContent = latitude;
            document.getElementById('longitude').textContent = longitude;
        }

        // Function to get the current position and update the location display
        function getLocationAndUpdateDisplay() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(position => {
                    const { latitude, longitude } = position.coords;
                    updateLocationDisplay(latitude, longitude);
                }, 
                error => {
                    console.error("Error getting location:", error);
                }, 
                {
                    enableHighAccuracy: true,
                    maximumAge: 0,
                    timeout: 5000
                });
            } else {
                alert("Geolocation is not supported by your browser.");
            }
        }

        // Initial location update
        getLocationAndUpdateDisplay();
        const userName = "<%= user.displayName %>";

        // Update the location every 30 seconds (30000 milliseconds)
        setInterval(getLocationAndUpdateDisplay, 30000);

        document.getElementById('create-meet-btn').addEventListener('click', () => {
            navigator.geolocation.getCurrentPosition(position => {
                const { latitude, longitude } = position.coords;
                fetch('/create-meet', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `latitude=${latitude}&longitude=${longitude}`
                }).then(response => response.json()).then(data => {
                    if (data.success) {
                        // Disable button for all users
                        document.getElementById('create-meet-btn').style.display = 'none';
                        document.getElementById('end-meet-btn').style.display = 'block';
                        preventReload = true; 
                    } else {
                        alert(data.message);
                    }
                });
            });
        });

        document.getElementById('mark-attendance-btn').addEventListener('click', (e) => {
            e.preventDefault();
            const name = userName;

            navigator.geolocation.getCurrentPosition(position => {
                const { latitude, longitude } = position.coords;
                fetch('/mark-attendance', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `name=${name}&latitude=${latitude}&longitude=${longitude}`
                }).then(response => response.json()).then(data => {
                    if (data.success) {
                        alert('Attendance marked!');
                    } else {
                        alert(data.message);
                    }
                });
            });
        });

        document.getElementById('end-meet-btn').addEventListener('click', () => {
            fetch('/end-meet', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
            }).then(response => response.json()).then(data => {
                if (data.success) {
                    alert('Meet ended. Attendance email sent.');
                    document.getElementById('create-meet-btn').style.display = 'block';
                    document.getElementById('end-meet-btn').style.display = 'none';
                    preventReload = false; 
                } else {
                    alert(data.message);
                }
            });
        });
         // Show alert on manual reload
    window.addEventListener('beforeunload', (e) => {
        if (preventReload) {
            e.preventDefault();
            e.returnValue = ''; // Some browsers require returnValue to be set
            return 'The meet is active. Reloading the page will lose the meet data. Are you sure you want to reload?';
        }
    });
    </script>
</body>
</html>
